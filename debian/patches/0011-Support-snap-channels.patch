From: Robert Ancell <robert.ancell@canonical.com>
Date: Thu, 23 Nov 2017 10:54:20 +1300
Subject: [PATCH 11/24] Support snap channels

---
 lib/gs-app.c                    |  91 ++++++++++++++
 lib/gs-app.h                    |   8 ++
 lib/gs-channel.c                | 116 ++++++++++++++++++
 lib/gs-channel.h                |  44 +++++++
 lib/gs-plugin-job-private.h     |   1 +
 lib/gs-plugin-job.c             |  31 +++++
 lib/gs-plugin-job.h             |   2 +
 lib/gs-plugin-loader.c          |  13 ++
 lib/gs-plugin-types.h           |   4 +
 lib/gs-plugin-vfuncs.h          |  18 +++
 lib/gs-plugin.c                 |   6 +
 lib/gs-self-test.c              |  16 +++
 lib/gs-utils.c                  |  35 ++++++
 lib/gs-utils.h                  |   2 +
 lib/meson.build                 |   2 +
 plugins/dummy/gs-plugin-dummy.c |  11 ++
 plugins/snap/gs-plugin-snap.c   | 254 +++++++++++++++++++++++++++++++++++++---
 src/gs-details-page.c           | 199 +++++++++++++++++++++++++++++--
 src/gs-details-page.ui          | 104 +++++++++++++---
 src/gtk-style.css               |  31 +++++
 20 files changed, 945 insertions(+), 43 deletions(-)
 create mode 100644 lib/gs-channel.c
 create mode 100644 lib/gs-channel.h

diff --git a/lib/gs-app.c b/lib/gs-app.c
index cb5e93b..04c4a71 100644
--- a/lib/gs-app.c
+++ b/lib/gs-app.c
@@ -113,6 +113,8 @@ typedef struct
 	AsContentRating		*content_rating;
 	GdkPixbuf		*pixbuf;
 	GsPrice			*price;
+	GPtrArray		*channels;
+	GsChannel		*active_channel;
 	GCancellable		*cancellable;
 	GsPluginAction		 pending_action;
 	GsAppPermissions         permissions;
@@ -605,6 +607,18 @@ gs_app_to_string_append (GsApp *app, GString *str)
 				  color->green * 255.f,
 				  color->blue * 255.f);
 	}
+	for (i = 0; i < priv->channels->len; i++) {
+		GsChannel *channel = g_ptr_array_index (priv->channels, i);
+		g_autofree gchar *key = NULL;
+		key = g_strdup_printf ("channel-%02u", i);
+		gs_app_kv_printf (str, key, "%s [%s]",
+		                  gs_channel_get_name (channel),
+		                  gs_channel_get_version (channel));
+	}
+	if (priv->active_channel != NULL) {
+		gs_app_kv_printf (str, "active-channel", "%s",
+		                  gs_channel_get_name (priv->active_channel));
+	}
 	keys = g_hash_table_get_keys (priv->metadata);
 	for (GList *l = keys; l != NULL; l = l->next) {
 		GVariant *val;
@@ -3959,6 +3973,80 @@ gs_app_get_priority (GsApp *app)
 	return priv->priority;
 }
 
+/**
+ * gs_app_add_channel:
+ * @app: a #GsApp
+ * @channel: a #GsChannel
+ *
+ * Adds a channel to the application.
+ *
+ * Since: 3.28
+ **/
+void
+gs_app_add_channel (GsApp *app, GsChannel *channel)
+{
+	GsAppPrivate *priv = gs_app_get_instance_private (app);
+	g_return_if_fail (GS_IS_APP (app));
+	g_return_if_fail (GS_IS_CHANNEL (channel));
+	g_ptr_array_add (priv->channels, g_object_ref (channel));
+	if (priv->active_channel == NULL && gs_channel_get_version (channel) != NULL)
+		priv->active_channel = g_object_ref (channel);
+}
+
+/**
+ * gs_app_get_channels:
+ * @app: a #GsApp
+ *
+ * Gets the list of channels.
+ *
+ * Returns: (element-type GsChannel) (transfer none): a list
+ *
+ * Since: 3.28
+ **/
+GPtrArray *
+gs_app_get_channels (GsApp *app)
+{
+	GsAppPrivate *priv = gs_app_get_instance_private (app);
+	g_return_val_if_fail (GS_IS_APP (app), NULL);
+	return priv->channels;
+}
+
+/**
+ * gs_app_set_active_channel:
+ * @app: a #GsApp
+ * @channel: a #GsChannel
+ *
+ * Set the currently active channel.
+ *
+ * Since: 3.28
+ **/
+void
+gs_app_set_active_channel (GsApp *app, GsChannel *channel)
+{
+	GsAppPrivate *priv = gs_app_get_instance_private (app);
+	g_return_if_fail (GS_IS_APP (app));
+	g_return_if_fail (GS_IS_CHANNEL (channel));
+	g_set_object (&priv->active_channel, channel);
+}
+
+/**
+ * gs_app_get_active_channel:
+ * @app: a #GsApp
+ *
+ * Gets the currently active channel.
+ *
+ * Returns: a #GsChannel or %NULL.
+ *
+ * Since: 3.28
+ **/
+GsChannel *
+gs_app_get_active_channel (GsApp *app)
+{
+	GsAppPrivate *priv = gs_app_get_instance_private (app);
+	g_return_val_if_fail (GS_IS_APP (app), NULL);
+	return priv->active_channel;
+}
+
 /**
  * gs_app_get_cancellable:
  * @app: a #GsApp
@@ -4140,6 +4228,8 @@ gs_app_dispose (GObject *object)
 	g_clear_pointer (&priv->reviews, g_ptr_array_unref);
 	g_clear_pointer (&priv->provides, g_ptr_array_unref);
 	g_clear_pointer (&priv->icons, g_ptr_array_unref);
+	g_clear_pointer (&priv->channels, g_ptr_array_unref);
+	g_clear_object (&priv->active_channel);
 
 	G_OBJECT_CLASS (gs_app_parent_class)->dispose (object);
 }
@@ -4325,6 +4415,7 @@ gs_app_init (GsApp *app)
 	priv->reviews = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
 	priv->provides = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
 	priv->icons = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
+	priv->channels = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
 	priv->metadata = g_hash_table_new_full (g_str_hash,
 	                                        g_str_equal,
 	                                        g_free,
diff --git a/lib/gs-app.h b/lib/gs-app.h
index 18d4bb4..5ce4205 100644
--- a/lib/gs-app.h
+++ b/lib/gs-app.h
@@ -13,6 +13,7 @@
 #include <gdk-pixbuf/gdk-pixbuf.h>
 #include <appstream-glib.h>
 
+#include "gs-channel.h"
 #include "gs-price.h"
 
 G_BEGIN_DECLS
@@ -381,5 +382,12 @@ void		 gs_app_set_permissions		(GsApp		*app,
 GsAppPermissions gs_app_get_update_permissions	(GsApp		*app);
 void		 gs_app_set_update_permissions	(GsApp		*app,
 						 GsAppPermissions update_permissions);
+GPtrArray	*gs_app_get_channels		(GsApp		*app);
+void		 gs_app_add_channel		(GsApp		*app,
+						 GsChannel	*channel);
+void		 gs_app_set_active_channel	(GsApp		*app,
+						 GsChannel	*channel);
+GsChannel	*gs_app_get_active_channel	(GsApp		*app);
 
 G_END_DECLS
+
diff --git a/lib/gs-channel.c b/lib/gs-channel.c
new file mode 100644
index 0000000..658a33b
--- /dev/null
+++ b/lib/gs-channel.c
@@ -0,0 +1,116 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2017 Canonical Ltd.
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "config.h"
+
+#include <glib/gi18n.h>
+
+#include "gs-channel.h"
+
+struct _GsChannel
+{
+	GObject	 parent_instance;
+
+	gchar	*name;
+	gchar	*version;
+};
+
+G_DEFINE_TYPE (GsChannel, gs_channel, G_TYPE_OBJECT)
+
+/**
+ * gs_channel_get_name:
+ * @channel: a #GsChannel
+ *
+ * Get the channel name.
+ *
+ * Returns: a channel name.
+ *
+ * Since: 3.28
+ */
+const gchar *
+gs_channel_get_name (GsChannel *channel)
+{
+	g_return_val_if_fail (GS_IS_CHANNEL (channel), NULL);
+	return channel->name;
+}
+
+/**
+ * gs_channel_get_version:
+ * @channel: a #GsChannel
+ *
+ * Get the channel version.
+ *
+ * Returns: a channel version.
+ *
+ * Since: 3.28
+ */
+const gchar *
+gs_channel_get_version (GsChannel *channel)
+{
+	g_return_val_if_fail (GS_IS_CHANNEL (channel), NULL);
+	return channel->version;
+}
+
+static void
+gs_channel_finalize (GObject *object)
+{
+	GsChannel *channel = GS_CHANNEL (object);
+
+	g_free (channel->name);
+	g_free (channel->version);
+
+	G_OBJECT_CLASS (gs_channel_parent_class)->finalize (object);
+}
+
+static void
+gs_channel_class_init (GsChannelClass *klass)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS (klass);
+	object_class->finalize = gs_channel_finalize;
+}
+
+static void
+gs_channel_init (GsChannel *channel)
+{
+}
+
+/**
+ * gs_channel_new:
+ * @name: the name of the channel.
+ * @version: the version this channel is providing.
+ *
+ * Creates a new channel object.
+ *
+ * Return value: a new #GsChannel object.
+ *
+ * Since: 3.28
+ **/
+GsChannel *
+gs_channel_new (const gchar *name, const gchar *version)
+{
+	GsChannel *channel;
+	channel = g_object_new (GS_TYPE_CHANNEL, NULL);
+	channel->name = g_strdup (name);
+	channel->version = g_strdup (version);
+	return GS_CHANNEL (channel);
+}
+
+/* vim: set noexpandtab: */
diff --git a/lib/gs-channel.h b/lib/gs-channel.h
new file mode 100644
index 0000000..64610ab
--- /dev/null
+++ b/lib/gs-channel.h
@@ -0,0 +1,44 @@
+ /* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2017 Canonical Ltd.
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef __GS_CHANNEL_H
+#define __GS_CHANNEL_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GS_TYPE_CHANNEL (gs_channel_get_type ())
+
+G_DECLARE_FINAL_TYPE (GsChannel, gs_channel, GS, CHANNEL, GObject)
+
+GsChannel	*gs_channel_new		(const gchar	*name,
+					 const gchar	*version);
+
+const gchar	*gs_channel_get_name	(GsChannel	*channel);
+
+const gchar	*gs_channel_get_version	(GsChannel	*channel);
+
+G_END_DECLS
+
+#endif /* __GS_CHANNEL_H */
+
+/* vim: set noexpandtab: */
diff --git a/lib/gs-plugin-job-private.h b/lib/gs-plugin-job-private.h
index 64ee39b..03c827b 100644
--- a/lib/gs-plugin-job-private.h
+++ b/lib/gs-plugin-job-private.h
@@ -38,6 +38,7 @@ GsPlugin		*gs_plugin_job_get_plugin		(GsPluginJob	*self);
 GsCategory		*gs_plugin_job_get_category		(GsPluginJob	*self);
 AsReview		*gs_plugin_job_get_review		(GsPluginJob	*self);
 GsPrice			*gs_plugin_job_get_price		(GsPluginJob	*self);
+GsChannel		*gs_plugin_job_get_channel		(GsPluginJob	*self);
 gchar			*gs_plugin_job_to_string		(GsPluginJob	*self);
 void			 gs_plugin_job_set_action		(GsPluginJob	*self,
 								 GsPluginAction	 action);
diff --git a/lib/gs-plugin-job.c b/lib/gs-plugin-job.c
index bc00101..4830b36 100644
--- a/lib/gs-plugin-job.c
+++ b/lib/gs-plugin-job.c
@@ -35,6 +35,7 @@ struct _GsPluginJob
 	GsCategory		*category;
 	AsReview		*review;
 	GsPrice			*price;
+	GsChannel		*channel;
 	gint64			 time_created;
 };
 
@@ -55,6 +56,7 @@ enum {
 	PROP_REVIEW,
 	PROP_MAX_RESULTS,
 	PROP_PRICE,
+	PROP_CHANNEL,
 	PROP_TIMEOUT,
 	PROP_LAST
 };
@@ -115,6 +117,9 @@ gs_plugin_job_to_string (GsPluginJob *self)
 		g_autofree gchar *price_string = gs_price_to_string (self->price);
 		g_string_append_printf (str, " with price=%s", price_string);
 	}
+	if (self->channel != NULL) {
+		g_string_append_printf (str, " with channel=%s", gs_channel_get_name (self->channel));
+	}
 	if (self->auth != NULL) {
 		g_string_append_printf (str, " with auth=%s",
 					gs_auth_get_auth_id (self->auth));
@@ -439,6 +444,20 @@ gs_plugin_job_get_price (GsPluginJob *self)
 	return self->price;
 }
 
+void
+gs_plugin_job_set_channel (GsPluginJob *self, GsChannel *channel)
+{
+	g_return_if_fail (GS_IS_PLUGIN_JOB (self));
+	g_set_object (&self->channel, channel);
+}
+
+GsChannel *
+gs_plugin_job_get_channel (GsPluginJob *self)
+{
+	g_return_val_if_fail (GS_IS_PLUGIN_JOB (self), NULL);
+	return self->channel;
+}
+
 static void
 gs_plugin_job_get_property (GObject *obj, guint prop_id, GValue *value, GParamSpec *pspec)
 {
@@ -487,6 +506,9 @@ gs_plugin_job_get_property (GObject *obj, guint prop_id, GValue *value, GParamSp
 	case PROP_PRICE:
 		g_value_set_object (value, self->price);
 		break;
+	case PROP_CHANNEL:
+		g_value_set_object (value, self->channel);
+		break;
 	case PROP_MAX_RESULTS:
 		g_value_set_uint (value, self->max_results);
 		break;
@@ -553,6 +575,9 @@ gs_plugin_job_set_property (GObject *obj, guint prop_id, const GValue *value, GP
 	case PROP_PRICE:
 		gs_plugin_job_set_price (self, g_value_get_object (value));
 		break;
+	case PROP_CHANNEL:
+		gs_plugin_job_set_channel (self, g_value_get_object (value));
+		break;
 	default:
 		G_OBJECT_WARN_INVALID_PROPERTY_ID (obj, prop_id, pspec);
 		break;
@@ -572,6 +597,7 @@ gs_plugin_job_finalize (GObject *obj)
 	g_clear_object (&self->category);
 	g_clear_object (&self->review);
 	g_clear_object (&self->price);
+	g_clear_object (&self->channel);
 	G_OBJECT_CLASS (gs_plugin_job_parent_class)->finalize (obj);
 }
 
@@ -666,6 +692,11 @@ gs_plugin_job_class_init (GsPluginJobClass *klass)
 				     GS_TYPE_PRICE,
 				     G_PARAM_READWRITE);
 	g_object_class_install_property (object_class, PROP_PRICE, pspec);
+
+	pspec = g_param_spec_object ("channel", NULL, NULL,
+				     GS_TYPE_CHANNEL,
+				     G_PARAM_READWRITE);
+	g_object_class_install_property (object_class, PROP_CHANNEL, pspec);
 }
 
 static void
diff --git a/lib/gs-plugin-job.h b/lib/gs-plugin-job.h
index a986334..46227cf 100644
--- a/lib/gs-plugin-job.h
+++ b/lib/gs-plugin-job.h
@@ -57,6 +57,8 @@ void		 gs_plugin_job_set_review		(GsPluginJob	*self,
 							 AsReview	*review);
 void		 gs_plugin_job_set_price		(GsPluginJob	*self,
 							 GsPrice	*price);
+void		 gs_plugin_job_set_channel		(GsPluginJob	*self,
+							 GsChannel	*channel);
 
 #define		 gs_plugin_job_newv(a,...)		GS_PLUGIN_JOB(g_object_new(GS_TYPE_PLUGIN_JOB, "action", a, __VA_ARGS__))
 
diff --git a/lib/gs-plugin-loader.c b/lib/gs-plugin-loader.c
index d132edb..6ca32af 100644
--- a/lib/gs-plugin-loader.c
+++ b/lib/gs-plugin-loader.c
@@ -126,6 +126,11 @@ typedef gboolean	 (*GsPluginPurchaseFunc)	(GsPlugin	*plugin,
 							 GsPrice	*price,
 							 GCancellable	*cancellable,
 							 GError		**error);
+typedef gboolean	 (*GsPluginSwitchChannelFunc)	(GsPlugin	*plugin,
+							 GsApp		*app,
+							 GsChannel	*channel,
+							 GCancellable	*cancellable,
+							 GError		**error);
 typedef gboolean	 (*GsPluginReviewFunc)		(GsPlugin	*plugin,
 							 GsApp		*app,
 							 AsReview	*review,
@@ -609,6 +614,14 @@ gs_plugin_loader_call_vfunc (GsPluginLoaderHelper *helper,
 					   cancellable, &error_local);
 		}
 		break;
+	case GS_PLUGIN_ACTION_SWITCH_CHANNEL:
+		{
+			GsPluginSwitchChannelFunc plugin_func = func;
+			ret = plugin_func (plugin, app,
+					   gs_plugin_job_get_channel (helper->plugin_job),
+					   cancellable, &error_local);
+		}
+		break;
 	case GS_PLUGIN_ACTION_REVIEW_SUBMIT:
 	case GS_PLUGIN_ACTION_REVIEW_UPVOTE:
 	case GS_PLUGIN_ACTION_REVIEW_DOWNVOTE:
diff --git a/lib/gs-plugin-types.h b/lib/gs-plugin-types.h
index 2c1eabe..81e83bf 100644
--- a/lib/gs-plugin-types.h
+++ b/lib/gs-plugin-types.h
@@ -129,6 +129,7 @@ typedef enum {
  * @GS_PLUGIN_REFINE_FLAGS_REQUIRE_DEVELOPER_NAME:	Require developer name
  * @GS_PLUGIN_REFINE_FLAGS_REQUIRE_KUDOS:		Require kudos
  * @GS_PLUGIN_REFINE_FLAGS_REQUIRE_CONTENT_RATING:	Require content rating
+ * @GS_PLUGIN_REFINE_FLAGS_REQUIRE_CHANNELS:		Require channel information
  *
  * The refine flags.
  **/
@@ -165,6 +166,7 @@ typedef enum {
 #define GS_PLUGIN_REFINE_FLAGS_REQUIRE_DEVELOPER_NAME	((guint64) 1 << 29)
 #define GS_PLUGIN_REFINE_FLAGS_REQUIRE_KUDOS		((guint64) 1 << 30)
 #define GS_PLUGIN_REFINE_FLAGS_REQUIRE_CONTENT_RATING	((guint64) 1 << 31)
+#define GS_PLUGIN_REFINE_FLAGS_REQUIRE_CHANNELS		((guint64) 1 << 33)
 typedef guint64 GsPluginRefineFlags;
 
 /**
@@ -229,6 +231,7 @@ typedef enum {
  * @GS_PLUGIN_ACTION_PURCHASE:			Purchase an app
  * @GS_PLUGIN_ACTION_DOWNLOAD:			Download an application
  * @GS_PLUGIN_ACTION_GET_ALTERNATES:		Get the alternates for a specific application
+ * @GS_PLUGIN_ACTION_SWITCH_CHANNEL:		Switch app channel
  *
  * The plugin action.
  **/
@@ -274,6 +277,7 @@ typedef enum {
 	GS_PLUGIN_ACTION_PURCHASE,
 	GS_PLUGIN_ACTION_DOWNLOAD,
 	GS_PLUGIN_ACTION_GET_ALTERNATES,
+	GS_PLUGIN_ACTION_SWITCH_CHANNEL,
 	/*< private >*/
 	GS_PLUGIN_ACTION_LAST
 } GsPluginAction;
diff --git a/lib/gs-plugin-vfuncs.h b/lib/gs-plugin-vfuncs.h
index 4cd28cb..f280c39 100644
--- a/lib/gs-plugin-vfuncs.h
+++ b/lib/gs-plugin-vfuncs.h
@@ -596,6 +596,24 @@ gboolean	 gs_plugin_app_install			(GsPlugin	*plugin,
 							 GCancellable	*cancellable,
 							 GError		**error);
 
+/**
+ * gs_plugin_app_switch_channel:
+ * @plugin: a #GsPlugin
+ * @app: a #GsApp
+ * @channel: a #GsChannel
+ * @cancellable: a #GCancellable, or %NULL
+ * @error: a #GError, or %NULL
+ *
+ * Set the app chanel.
+ *
+ * Returns: %TRUE for success or if not relevant
+ **/
+gboolean	 gs_plugin_app_switch_channel		(GsPlugin	*plugin,
+							 GsApp		*app,
+							 GsChannel	*channel,
+							 GCancellable	*cancellable,
+							 GError		**error);
+
 /**
  * gs_plugin_app_remove:
  * @plugin: a #GsPlugin
diff --git a/lib/gs-plugin.c b/lib/gs-plugin.c
index 32bdb80..6797993 100644
--- a/lib/gs-plugin.c
+++ b/lib/gs-plugin.c
@@ -1646,6 +1646,8 @@ gs_plugin_action_to_function_name (GsPluginAction action)
 		return "gs_plugin_app_purchase";
 	if (action == GS_PLUGIN_ACTION_GET_ALTERNATES)
 		return "gs_plugin_add_alternates";
+	if (action == GS_PLUGIN_ACTION_SWITCH_CHANNEL)
+		return "gs_plugin_app_switch_channel";
 	return NULL;
 }
 
@@ -1742,6 +1744,8 @@ gs_plugin_action_to_string (GsPluginAction action)
 		return "purchase";
 	if (action == GS_PLUGIN_ACTION_GET_ALTERNATES)
 		return "get-alternates";
+	if (action == GS_PLUGIN_ACTION_SWITCH_CHANNEL)
+		return "switch-channel";
 	return NULL;
 }
 
@@ -1838,6 +1842,8 @@ gs_plugin_action_from_string (const gchar *action)
 		return GS_PLUGIN_ACTION_PURCHASE;
 	if (g_strcmp0 (action, "get-alternates") == 0)
 		return GS_PLUGIN_ACTION_GET_ALTERNATES;
+	if (g_strcmp0 (action, "switch-channel") == 0)
+		return GS_PLUGIN_ACTION_SWITCH_CHANNEL;
 	return GS_PLUGIN_ACTION_UNKNOWN;
 }
 
diff --git a/lib/gs-self-test.c b/lib/gs-self-test.c
index 01efeca..26512d9 100644
--- a/lib/gs-self-test.c
+++ b/lib/gs-self-test.c
@@ -30,6 +30,11 @@ gs_utils_url_func (void)
 	g_autofree gchar *path3 = NULL;
 	g_autofree gchar *scheme1 = NULL;
 	g_autofree gchar *scheme2 = NULL;
+	g_autofree gchar *value1 = NULL;
+	g_autofree gchar *value2 = NULL;
+	g_autofree gchar *value3 = NULL;
+	g_autofree gchar *value4 = NULL;
+	g_autofree gchar *value5 = NULL;
 
 	scheme1 = gs_utils_get_url_scheme ("appstream://gimp.desktop");
 	g_assert_cmpstr (scheme1, ==, "appstream");
@@ -42,6 +47,17 @@ gs_utils_url_func (void)
 	g_assert_cmpstr (path2, ==, "gimp.desktop");
 	path3 = gs_utils_get_url_path ("apt:/gimp");
 	g_assert_cmpstr (path3, ==, "gimp");
+
+	value1 = gs_utils_get_url_query_param ("snap://moon-buggy", "channel");
+	g_assert_null (value1);
+	value2 = gs_utils_get_url_query_param ("snap://moon-buggy?", "channel");
+	g_assert_null (value2);
+	value3 = gs_utils_get_url_query_param ("snap://moon-buggy?channel=beta", "channel");
+	g_assert_cmpstr (value3, ==, "beta");
+	value4 = gs_utils_get_url_query_param ("snap://moon-buggy?channel=beta&foo=bar", "channel");
+	g_assert_cmpstr (value4, ==, "beta");
+	value5 = gs_utils_get_url_query_param ("snap://moon-buggy?foo=bar&channel=beta", "channel");
+	g_assert_cmpstr (value5, ==, "beta");
 }
 
 static void
diff --git a/lib/gs-utils.c b/lib/gs-utils.c
index d4f9505..0c04b3b 100644
--- a/lib/gs-utils.c
+++ b/lib/gs-utils.c
@@ -1040,6 +1040,41 @@ gs_utils_get_url_path (const gchar *url)
 	return g_strdup (path);
 }
 
+/**
+ * gs_utils_get_url_query:
+ * @url: A URL, e.g. "snap://moon-buggy?channel=beta"
+ * @url: A parameter name, e.g. "channel"
+ *
+ * Gets a query parameter from the URL string.
+ *
+ * Returns: the URL query parameter, e.g. "beta"
+ */
+gchar *
+gs_utils_get_url_query_param (const gchar *url, const gchar *name)
+{
+	g_autoptr(SoupURI) uri = NULL;
+	const gchar *query;
+	g_autofree gchar *prefix = NULL;
+	g_auto(GStrv) params = NULL;
+	int i;
+
+	uri = soup_uri_new (url);
+	if (!SOUP_URI_IS_VALID (uri))
+		return NULL;
+
+	query = soup_uri_get_query (uri);
+	if (query == NULL)
+		return NULL;
+	params = g_strsplit (query, "&", -1);
+	prefix = g_strdup_printf ("%s=", name);
+	for (i = 0; params[i] != NULL; i++) {
+		if (g_str_has_prefix (params[i], prefix))
+			return g_strdup (params[i] + strlen (prefix));
+	}
+
+	return NULL;
+}
+
 /**
  * gs_user_agent:
  *
diff --git a/lib/gs-utils.h b/lib/gs-utils.h
index 9dd11e5..5dbbd74 100644
--- a/lib/gs-utils.h
+++ b/lib/gs-utils.h
@@ -78,6 +78,8 @@ gboolean	 gs_utils_is_low_resolution	  (GtkWidget     *toplevel);
 
 gchar		*gs_utils_get_url_scheme	(const gchar	*url);
 gchar		*gs_utils_get_url_path		(const gchar	*url);
+gchar		*gs_utils_get_url_query_param	(const gchar	*url,
+						 const gchar	*name);
 const gchar	*gs_user_agent			(void);
 void		 gs_utils_append_key_value	(GString	*str,
 						 gsize		 align_len,
diff --git a/lib/meson.build b/lib/meson.build
index 766d379..47a3d01 100644
--- a/lib/meson.build
+++ b/lib/meson.build
@@ -42,6 +42,7 @@ install_headers([
     'gs-app-list.h',
     'gs-auth.h',
     'gs-category.h',
+    'gs-channel.h',
     'gs-os-release.h',
     'gs-plugin.h',
     'gs-plugin-event.h',
@@ -76,6 +77,7 @@ libgnomesoftware = static_library(
     'gs-app-list.c',
     'gs-auth.c',
     'gs-category.c',
+    'gs-channel.c',
     'gs-debug.c',
     'gs-ioprio.c',
     'gs-ioprio.h',
diff --git a/plugins/dummy/gs-plugin-dummy.c b/plugins/dummy/gs-plugin-dummy.c
index bb3b1b1..658ec10 100644
--- a/plugins/dummy/gs-plugin-dummy.c
+++ b/plugins/dummy/gs-plugin-dummy.c
@@ -832,6 +832,17 @@ gs_plugin_refresh (GsPlugin *plugin,
 	return gs_plugin_dummy_delay (plugin, app, 3100, cancellable, error);
 }
 
+gboolean
+gs_plugin_app_switch_channel (GsPlugin *plugin,
+			      GsApp *app,
+			      GsChannel *channel,
+			      GCancellable *cancellable,
+			      GError **error)
+{
+	g_debug ("Switching channel to %s", gs_channel_get_name (channel));
+	return TRUE;
+}
+
 gboolean
 gs_plugin_app_upgrade_download (GsPlugin *plugin, GsApp *app,
 			        GCancellable *cancellable, GError **error)
diff --git a/plugins/snap/gs-plugin-snap.c b/plugins/snap/gs-plugin-snap.c
index 00d2e38..5d7e427 100644
--- a/plugins/snap/gs-plugin-snap.c
+++ b/plugins/snap/gs-plugin-snap.c
@@ -22,6 +22,27 @@ struct GsPluginData {
 	GHashTable		*store_snaps;
 };
 
+typedef struct {
+	SnapdSnap *snap;
+	gboolean full_details;
+} CacheEntry;
+
+static CacheEntry *
+cache_entry_new (SnapdSnap *snap, gboolean full_details)
+{
+	CacheEntry *entry = g_slice_new (CacheEntry);
+	entry->snap = g_object_ref (snap);
+	entry->full_details = full_details;
+	return entry;
+}
+
+static void
+cache_entry_free (CacheEntry *entry)
+{
+	g_object_unref (entry->snap);
+	g_slice_free (CacheEntry, entry);
+}
+
 static SnapdClient *
 get_client (GsPlugin *plugin, GError **error)
 {
@@ -59,7 +80,7 @@ gs_plugin_initialize (GsPlugin *plugin)
 	}
 
 	priv->store_snaps = g_hash_table_new_full (g_str_hash, g_str_equal,
-						   g_free, (GDestroyNotify) g_object_unref);
+						   g_free, (GDestroyNotify) cache_entry_free);
 
 	priv->auth = gs_auth_new ("snapd", "ubuntusso", &error);
 	if (priv->auth) {
@@ -229,21 +250,24 @@ gs_plugin_setup (GsPlugin *plugin, GCancellable *cancellable, GError **error)
 }
 
 static SnapdSnap *
-store_snap_cache_lookup (GsPlugin *plugin, const gchar *name)
+store_snap_cache_lookup (GsPlugin *plugin, const gchar *name, gboolean need_details)
 {
 	GsPluginData *priv = gs_plugin_get_data (plugin);
+	CacheEntry *entry;
 	g_autoptr(GMutexLocker) locker = g_mutex_locker_new (&priv->store_snaps_lock);
-	SnapdSnap *snap;
 
-	snap = g_hash_table_lookup (priv->store_snaps, name);
-	if (snap == NULL)
+	entry = g_hash_table_lookup (priv->store_snaps, name);
+	if (entry == NULL)
 		return NULL;
 
-	return g_object_ref (snap);
+	if (need_details && !entry->full_details)
+		return NULL;
+
+	return g_object_ref (entry->snap);
 }
 
 static void
-store_snap_cache_update (GsPlugin *plugin, GPtrArray *snaps)
+store_snap_cache_update (GsPlugin *plugin, GPtrArray *snaps, gboolean full_details)
 {
 	GsPluginData *priv = gs_plugin_get_data (plugin);
 	g_autoptr(GMutexLocker) locker = g_mutex_locker_new (&priv->store_snaps_lock);
@@ -251,7 +275,7 @@ store_snap_cache_update (GsPlugin *plugin, GPtrArray *snaps)
 
 	for (i = 0; i < snaps->len; i++) {
 		SnapdSnap *snap = snaps->pdata[i];
-		g_hash_table_insert (priv->store_snaps, g_strdup (snapd_snap_get_name (snap)), g_object_ref (snap));
+		g_hash_table_insert (priv->store_snaps, g_strdup (snapd_snap_get_name (snap)), cache_entry_new (snap, full_details));
 	}
 }
 
@@ -271,7 +295,7 @@ find_snaps (GsPlugin *plugin, SnapdFindFlags flags, const gchar *section, const
 		return NULL;
 	}
 
-	store_snap_cache_update (plugin, snaps);
+	store_snap_cache_update (plugin, snaps, flags & SNAPD_FIND_FLAGS_MATCH_NAME);
 
 	return g_steal_pointer (&snaps);
 }
@@ -332,6 +356,8 @@ snap_to_app (GsPlugin *plugin, SnapdSnap *snap)
 
 	if (priv->system_confinement == SNAPD_SYSTEM_CONFINEMENT_STRICT && confinement == SNAPD_CONFINEMENT_STRICT)
 		gs_app_add_kudo (app, GS_APP_KUDO_SANDBOXED);
+	else
+		gs_app_remove_kudo (app, GS_APP_KUDO_SANDBOXED);
 
 	return g_steal_pointer (&app);
 }
@@ -347,6 +373,7 @@ gs_plugin_url_to_app (GsPlugin *plugin,
 	g_autofree gchar *path = NULL;
 	g_autoptr(GPtrArray) snaps = NULL;
 	g_autoptr(GsApp) app = NULL;
+	g_autofree gchar *channel_name = NULL;
 
 	/* not us */
 	scheme = gs_utils_get_url_scheme (url);
@@ -360,6 +387,9 @@ gs_plugin_url_to_app (GsPlugin *plugin,
 		return TRUE;
 
 	app = snap_to_app (plugin, g_ptr_array_index (snaps, 0));
+	channel_name = gs_utils_get_url_query_param (url, "channel");
+	if (channel_name != NULL)
+		gs_app_set_metadata (app, "snap::channel", channel_name);
 	gs_app_list_add (list, app);
 
 	return TRUE;
@@ -631,13 +661,13 @@ gs_plugin_add_search (GsPlugin *plugin,
 }
 
 static SnapdSnap *
-get_store_snap (GsPlugin *plugin, const gchar *name, GCancellable *cancellable, GError **error)
+get_store_snap (GsPlugin *plugin, const gchar *name, gboolean need_details, GCancellable *cancellable, GError **error)
 {
 	SnapdSnap *snap = NULL;
 	g_autoptr(GPtrArray) snaps = NULL;
 
 	/* use cached version if available */
-	snap = store_snap_cache_lookup (plugin, name);
+	snap = store_snap_cache_lookup (plugin, name, need_details);
 	if (snap != NULL)
 		return g_object_ref (snap);
 
@@ -792,7 +822,7 @@ load_icon (GsPlugin *plugin, SnapdClient *client, GsApp *app, const gchar *id, S
 	}
 
 	if (store_snap == NULL)
-		store_snap = get_store_snap (plugin, gs_app_get_metadata_item (app, "snap::name"), cancellable, NULL);
+		store_snap = get_store_snap (plugin, gs_app_get_metadata_item (app, "snap::name"), FALSE, cancellable, NULL);
 	if (store_snap != NULL)
 		return load_store_icon (app, store_snap);
 
@@ -874,6 +904,102 @@ G_GNUC_END_IGNORE_DEPRECATIONS
 	}
 }
 
+static void
+add_channel (GsApp *app, const gchar *name, const gchar *version)
+{
+	g_autoptr(GsChannel) c = NULL;
+
+	c = gs_channel_new (name, version);
+	gs_app_add_channel (app, c);
+}
+
+static int
+compare_branch_names (gconstpointer a, gconstpointer b)
+{
+	SnapdChannel *channel_a = *((SnapdChannel **) a);
+	SnapdChannel *channel_b = *((SnapdChannel **) b);
+	return g_strcmp0 (snapd_channel_get_name (channel_a), snapd_channel_get_name (channel_b));
+}
+
+static void
+refine_channels (GsApp *app, SnapdSnap *snap)
+{
+	gchar **tracks;
+	guint i;
+
+	/* already refined... */
+	if (gs_app_get_channels (app)->len > 0)
+		return;
+
+	tracks = snapd_snap_get_tracks (snap);
+	for (i = 0; tracks[i] != NULL; i++) {
+		const gchar *track = tracks[i];
+		const gchar *risks[] = {"stable", "candidate", "beta", "edge", NULL};
+		const gchar *last_version = NULL;
+		guint j;
+
+		for (j = 0; risks[j] != NULL; j++) {
+			const gchar *risk = risks[j];
+			GPtrArray *channels;
+			g_autofree gchar *name = NULL;
+			const gchar *version = NULL;
+			guint k;
+			g_autoptr(GPtrArray) branches = NULL;
+
+			channels = snapd_snap_get_channels (snap);
+
+			if (strcmp (track, "latest") == 0)
+				name = g_strdup (risk);
+			else
+				name = g_strdup_printf ("%s/%s", track, risk);
+			for (k = 0; k < channels->len; k++) {
+				SnapdChannel *channel = channels->pdata[k];
+				if (strcmp (snapd_channel_get_name (channel), name) == 0) {
+					version = snapd_channel_get_version (channel);
+					break;
+				}
+			}
+			if (version == NULL)
+				version = last_version;
+			add_channel (app, name, version);
+
+			/* add any branches for this track/risk */
+			branches = g_ptr_array_new ();
+			for (k = 0; k < channels->len; k++) {
+				SnapdChannel *c = channels->pdata[k];
+				if (snapd_channel_get_branch (c) != NULL &&
+				    g_strcmp0 (snapd_channel_get_track (c), track) == 0 &&
+				    g_strcmp0 (snapd_channel_get_risk (c), risk) == 0)
+					g_ptr_array_add (branches, c);
+			}
+			g_ptr_array_sort (branches, compare_branch_names);
+			for (k = 0; k < branches->len; k++) {
+				SnapdChannel *c = branches->pdata[k];
+				add_channel (app, snapd_channel_get_name (c), snapd_channel_get_version (c));
+			}
+
+			last_version = version;
+		}
+	}
+}
+
+static gboolean
+set_active_channel (GsApp *app, SnapdChannel *channel)
+{
+	GPtrArray *channels = gs_app_get_channels (app);
+	guint i;
+
+	for (i = 0; i < channels->len; i++) {
+		GsChannel *c = g_ptr_array_index (channels, i);
+		if (g_strcmp0 (gs_channel_get_name (c), snapd_channel_get_name (channel)) == 0) {
+			gs_app_set_active_channel (app, c);
+			return TRUE;
+		}
+	}
+
+	return FALSE;
+}
+
 gboolean
 gs_plugin_refine_app (GsPlugin *plugin,
 		      GsApp *app,
@@ -883,7 +1009,7 @@ gs_plugin_refine_app (GsPlugin *plugin,
 {
 	GsPluginData *priv = gs_plugin_get_data (plugin);
 	g_autoptr(SnapdClient) client = NULL;
-	const gchar *name;
+	const gchar *name, *tracking_channel = NULL, *store_version = NULL;
 	g_autoptr(SnapdSnap) local_snap = NULL;
 	g_autoptr(SnapdSnap) store_snap = NULL;
 	SnapdSnap *snap;
@@ -900,13 +1026,52 @@ gs_plugin_refine_app (GsPlugin *plugin,
 
 	/* get information from local snaps and store */
 	local_snap = snapd_client_get_snap_sync (client, gs_app_get_metadata_item (app, "snap::name"), cancellable, NULL);
-	if (local_snap == NULL || (flags & GS_PLUGIN_REFINE_FLAGS_REQUIRE_SCREENSHOTS) != 0)
-		store_snap = get_store_snap (plugin, gs_app_get_metadata_item (app, "snap::name"), cancellable, NULL);
+	/* Need to do full lookup when channel information required
+	 * https://forum.snapcraft.io/t/channel-maps-list-is-empty-when-using-v1-snaps-search-as-opposed-to-using-v2-snaps-details */
+	if (local_snap == NULL || (flags & (GS_PLUGIN_REFINE_FLAGS_REQUIRE_SCREENSHOTS | GS_PLUGIN_REFINE_FLAGS_REQUIRE_CHANNELS)) != 0)
+		store_snap = get_store_snap (plugin, gs_app_get_metadata_item (app, "snap::name"), (flags & GS_PLUGIN_REFINE_FLAGS_REQUIRE_CHANNELS) != 0, cancellable, NULL);
 	if (local_snap == NULL && store_snap == NULL)
 		return TRUE;
 
+	/* get channel information */
+	if (store_snap != NULL && flags & GS_PLUGIN_REFINE_FLAGS_REQUIRE_CHANNELS)
+		refine_channels (app, store_snap);
+
+	/* set channel being tracked */
 	if (local_snap != NULL)
-		gs_app_set_state (app, AS_APP_STATE_INSTALLED);
+		tracking_channel = snapd_snap_get_tracking_channel (local_snap);
+	else
+		tracking_channel = gs_app_get_metadata_item (app, "snap::channel");
+	if (store_snap != NULL && tracking_channel != NULL) {
+		SnapdChannel *c = NULL;
+
+		c = snapd_snap_match_channel (store_snap, tracking_channel);
+		if (c != NULL)
+			set_active_channel (app, c);
+	}
+
+	/* get latest upstream version */
+	if (store_snap != NULL) {
+		GsChannel *channel = gs_app_get_active_channel (app);
+		if (channel != NULL)
+			store_version = gs_channel_get_version (channel);
+		else
+			store_version = snapd_snap_get_version (store_snap);
+	}
+
+	gs_app_set_update_version (app, NULL);
+	if (local_snap != NULL) {
+		if (store_version != NULL && g_strcmp0 (store_version, snapd_snap_get_version (local_snap)) != 0) {
+			gs_app_set_update_version (app, store_version);
+			gs_app_set_state (app, AS_APP_STATE_UPDATABLE_LIVE);
+		}
+		else {
+			// Workaround it not being valid to switch from updatable to installed (e.g. if you switch channels)
+			if (gs_app_get_state (app) == AS_APP_STATE_UPDATABLE_LIVE)
+				gs_app_set_state (app, AS_APP_STATE_UNKNOWN);
+			gs_app_set_state (app, AS_APP_STATE_INSTALLED);
+		}
+	}
 	else
 		gs_app_set_state (app, AS_APP_STATE_AVAILABLE);
 
@@ -991,6 +1156,7 @@ gs_plugin_app_install (GsPlugin *plugin,
 {
 	g_autoptr(SnapdClient) client = NULL;
 	SnapdInstallFlags flags = SNAPD_INSTALL_FLAGS_NONE;
+	const gchar *channel = NULL;
 
 	/* We can only install apps we know of */
 	if (g_strcmp0 (gs_app_get_management_plugin (app), "snap") != 0)
@@ -1000,10 +1166,39 @@ gs_plugin_app_install (GsPlugin *plugin,
 	if (client == NULL)
 		return FALSE;
 
+	if (gs_app_get_active_channel (app) != NULL)
+		channel = gs_channel_get_name (gs_app_get_active_channel (app));
+
 	gs_app_set_state (app, AS_APP_STATE_INSTALLING);
 	if (g_strcmp0 (gs_app_get_metadata_item (app, "snap::confinement"), "classic") == 0)
 		flags |= SNAPD_INSTALL_FLAGS_CLASSIC;
-	if (!snapd_client_install2_sync (client, flags, gs_app_get_metadata_item (app, "snap::name"), NULL, NULL, progress_cb, app, cancellable, error)) {
+	if (!snapd_client_install2_sync (client, flags, gs_app_get_metadata_item (app, "snap::name"), channel, NULL, progress_cb, app, cancellable, error)) {
+		gs_app_set_state_recover (app);
+		snapd_error_convert (error);
+		return FALSE;
+	}
+	gs_app_set_state (app, AS_APP_STATE_INSTALLED);
+	return TRUE;
+}
+
+gboolean
+gs_plugin_update_app (GsPlugin *plugin,
+		      GsApp *app,
+		      GCancellable *cancellable,
+		      GError **error)
+{
+	g_autoptr(SnapdClient) client = NULL;
+
+	/* We can only install apps we know of */
+	if (g_strcmp0 (gs_app_get_management_plugin (app), "snap") != 0)
+		return TRUE;
+
+	client = get_client (plugin, error);
+	if (client == NULL)
+		return FALSE;
+
+	gs_app_set_state (app, AS_APP_STATE_INSTALLING);
+	if (!snapd_client_refresh_sync (client, gs_app_get_metadata_item (app, "snap::name"), NULL, progress_cb, app, cancellable, error)) {
 		gs_app_set_state_recover (app);
 		snapd_error_convert (error);
 		return FALSE;
@@ -1092,6 +1287,31 @@ gs_plugin_launch (GsPlugin *plugin,
 	return g_app_info_launch (info, NULL, NULL, error);
 }
 
+gboolean
+gs_plugin_app_switch_channel (GsPlugin *plugin,
+			      GsApp *app,
+			      GsChannel *channel,
+			      GCancellable *cancellable,
+			      GError **error)
+{
+	g_autoptr(SnapdClient) client = NULL;
+
+	/* We can only modify apps we know of */
+	if (g_strcmp0 (gs_app_get_management_plugin (app), "snap") != 0)
+		return TRUE;
+
+	client = get_client (plugin, error);
+	if (client == NULL)
+		return FALSE;
+
+	if (!snapd_client_switch_sync (client, gs_app_get_metadata_item (app, "snap::name"), gs_channel_get_name (channel), progress_cb, app, cancellable, error)) {
+		snapd_error_convert (error);
+		return FALSE;
+	}
+
+	return TRUE;
+}
+
 gboolean
 gs_plugin_app_remove (GsPlugin *plugin,
 		      GsApp *app,
diff --git a/src/gs-details-page.c b/src/gs-details-page.c
index d0ca6c7..50369fd 100644
--- a/src/gs-details-page.c
+++ b/src/gs-details-page.c
@@ -104,6 +104,8 @@ struct _GsDetailsPage
 	GtkWidget		*label_details_size_download_value;
 	GtkWidget		*label_details_updated_title;
 	GtkWidget		*label_details_updated_value;
+	GtkWidget		*label_details_channel_title;
+	GtkWidget		*button_details_channel;
 	GtkWidget		*label_details_version_value;
 	GtkWidget		*label_details_permissions_title;
 	GtkWidget		*button_details_permissions_value;
@@ -121,6 +123,7 @@ struct _GsDetailsPage
 	GtkWidget		*spinner_remove;
 	GtkWidget		*stack_details;
 	GtkWidget		*grid_details_kudo;
+	GtkWidget		*grid_popover_channel;
 	GtkWidget		*image_details_kudo_docs;
 	GtkWidget		*image_details_kudo_sandboxed;
 	GtkWidget		*image_details_kudo_integration;
@@ -132,6 +135,7 @@ struct _GsDetailsPage
 	GtkWidget		*label_details_kudo_translated;
 	GtkWidget		*label_details_kudo_updated;
 	GtkWidget		*progressbar_top;
+	GtkWidget		*popover_channel;
 	GtkWidget		*popover_license_free;
 	GtkWidget		*popover_license_nonfree;
 	GtkWidget		*popover_license_unknown;
@@ -1047,6 +1051,7 @@ gs_details_page_refresh_all (GsDetailsPage *self)
 	guint64 user_integration_bf;
 	gboolean show_support_box = FALSE;
 	g_autofree gchar *origin = NULL;
+	GsChannel *channel;
 	g_autoptr(GError) error = NULL;
 
 	/* change widgets */
@@ -1130,13 +1135,22 @@ gs_details_page_refresh_all (GsDetailsPage *self)
 		gtk_widget_set_visible (self->button_details_license_unknown, FALSE);
 	}
 
-	/* set version */
-	tmp = gs_app_get_version (self->app);
-	if (tmp != NULL){
-		gtk_label_set_label (GTK_LABEL (self->label_details_version_value), tmp);
+	/* set channel */
+	channel = gs_app_get_active_channel (self->app);
+	gtk_widget_set_visible (self->label_details_channel_title, channel != NULL);
+	gtk_widget_set_visible (self->button_details_channel, channel != NULL);
+	if (channel != NULL) {
+		gtk_button_set_label (GTK_BUTTON (self->button_details_channel), gs_channel_get_name (channel));
+		gtk_label_set_label (GTK_LABEL (self->label_details_version_value), gs_channel_get_version (channel));
 	} else {
-		/* TRANSLATORS: this is where the version is not known */
-		gtk_label_set_label (GTK_LABEL (self->label_details_version_value), C_("version", "Unknown"));
+		/* set version */
+		tmp = gs_app_get_version (self->app);
+		if (tmp != NULL){
+			gtk_label_set_label (GTK_LABEL (self->label_details_version_value), tmp);
+		} else {
+			/* TRANSLATORS: this is where the version is not known */
+			gtk_label_set_label (GTK_LABEL (self->label_details_version_value), C_("version", "Unknown"));
+		}
 	}
 
 	/* refresh size information */
@@ -1895,7 +1909,8 @@ gs_details_page_set_local_file (GsDetailsPage *self, GFile *file)
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_DEVELOPER_NAME |
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_KUDOS |
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_CONTENT_RATING |
-							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_SCREENSHOTS,
+							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_SCREENSHOTS |
+							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_CHANNELS,
 					 NULL);
 	gs_plugin_loader_job_process_async (self->plugin_loader, plugin_job,
 					    self->cancellable,
@@ -1929,6 +1944,7 @@ gs_details_page_set_url (GsDetailsPage *self, const gchar *url)
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_KUDOS |
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_SCREENSHOTS |
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_CONTENT_RATING |
+							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_CHANNELS |
 							 GS_PLUGIN_REFINE_FLAGS_ALLOW_PACKAGES,
 					 NULL);
 	gs_plugin_loader_job_process_async (self->plugin_loader, plugin_job,
@@ -1967,7 +1983,8 @@ gs_details_page_load_stage1 (GsDetailsPage *self)
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_DEVELOPER_NAME |
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_KUDOS |
 							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_CONTENT_RATING |
-							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_SCREENSHOTS,
+							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_SCREENSHOTS |
+							 GS_PLUGIN_REFINE_FLAGS_REQUIRE_CHANNELS,
 					 NULL);
 	gs_plugin_loader_job_process_async (self->plugin_loader, plugin_job,
 					    self->cancellable,
@@ -2064,6 +2081,165 @@ gs_details_page_app_cancel_button_cb (GtkWidget *widget, GsDetailsPage *self)
 		gs_details_page_remove_app (self);
 }
 
+typedef struct {
+	GsDetailsPage	*self;
+	GsChannel	*channel;
+} GsDetailsPageChannelHelper;
+
+static void
+gs_details_page_channel_helper_free (GsDetailsPageChannelHelper *helper)
+{
+	g_object_unref (helper->self);
+	g_object_unref (helper->channel);
+	g_free (helper);
+}
+
+G_DEFINE_AUTOPTR_CLEANUP_FUNC(GsDetailsPageChannelHelper, gs_details_page_channel_helper_free);
+
+static void
+gs_page_channel_switch_refine_cb (GObject *source,
+                                  GAsyncResult *res,
+                                  gpointer user_data)
+{
+	g_autoptr(GsDetailsPageChannelHelper) helper = (GsDetailsPageChannelHelper *) user_data;
+	GsDetailsPage *self = helper->self;
+	GsPluginLoader *plugin_loader = GS_PLUGIN_LOADER (source);
+	gboolean ret;
+	g_autoptr(GError) error = NULL;
+
+	ret = gs_plugin_loader_job_action_finish (plugin_loader,
+						  res,
+						  &error);
+	if (g_error_matches (error,
+			     GS_PLUGIN_ERROR,
+			     GS_PLUGIN_ERROR_CANCELLED)) {
+		g_debug ("%s", error->message);
+		return;
+	}
+	if (!ret) {
+		g_warning ("failed to refine %s: %s",
+			   gs_app_get_id (self->app),
+			   error->message);
+		return;
+	}
+
+	gs_details_page_refresh_all (self);
+}
+
+static void
+gs_page_channel_switched_cb (GObject *source,
+                             GAsyncResult *res,
+                             gpointer user_data)
+{
+	g_autoptr(GsDetailsPageChannelHelper) helper = (GsDetailsPageChannelHelper *) user_data;
+	GsDetailsPage *self = helper->self;
+	GsPluginLoader *plugin_loader = GS_PLUGIN_LOADER (source);
+	gboolean ret;
+	g_autoptr(GsPluginJob) plugin_job = NULL;
+	g_autoptr(GError) error = NULL;
+
+	ret = gs_plugin_loader_job_action_finish (plugin_loader,
+						  res,
+						  &error);
+	if (g_error_matches (error,
+			     GS_PLUGIN_ERROR,
+			     GS_PLUGIN_ERROR_CANCELLED)) {
+		g_debug ("%s", error->message);
+		return;
+	}
+	if (!ret) {
+		g_warning ("failed to switch channel %s: %s",
+		           gs_app_get_id (self->app),
+		           error->message);
+		return;
+	}
+
+	plugin_job = gs_plugin_job_newv (GS_PLUGIN_ACTION_REFINE,
+					 "app", self->app,
+					 "refine-flags", GS_PLUGIN_REFINE_FLAGS_REQUIRE_VERSION,
+					 NULL);
+	gs_plugin_loader_job_process_async (self->plugin_loader, plugin_job,
+					    self->app_cancellable,
+					    gs_page_channel_switch_refine_cb,
+					    g_steal_pointer (&helper));
+}
+
+static void
+gs_details_page_switch_channel_cb (GtkWidget *widget, gpointer user_data)
+{
+	g_autoptr(GsDetailsPageChannelHelper) helper = (GsDetailsPageChannelHelper *) user_data;
+	GsDetailsPage *self = helper->self;
+	g_autoptr(GsPluginJob) plugin_job = NULL;
+
+	gtk_widget_hide (self->popover_channel);
+
+	gs_app_set_active_channel (self->app, helper->channel);
+
+	switch (gs_app_get_state (self->app)) {
+	case AS_APP_STATE_INSTALLED:
+	case AS_APP_STATE_UPDATABLE:
+	case AS_APP_STATE_UPDATABLE_LIVE:
+		plugin_job = gs_plugin_job_newv (GS_PLUGIN_ACTION_SWITCH_CHANNEL,
+						 "app", self->app,
+						 "channel", helper->channel,
+						 NULL);
+		gs_plugin_loader_job_process_async (self->plugin_loader, plugin_job,
+						    self->app_cancellable,
+						    gs_page_channel_switched_cb,
+						    g_steal_pointer (&helper));
+		break;
+	default:
+		break;
+	}
+
+	gs_details_page_refresh_all (self);
+}
+
+static void
+gs_details_page_channel_cb (GtkWidget *widget, GsDetailsPage *self)
+{
+	GPtrArray *channels;
+	guint i;
+
+	gs_container_remove_all (GTK_CONTAINER (self->grid_popover_channel));
+	channels = gs_app_get_channels (self->app);
+	for (i = 0; i < channels->len; i++) {
+		GsChannel *channel = g_ptr_array_index (channels, i);
+		const gchar *version;
+		GtkWidget *label;
+		GtkWidget *button;
+
+		version = gs_channel_get_version (channel);
+
+		label = gtk_label_new (gs_channel_get_name (channel));
+		gtk_label_set_xalign (GTK_LABEL (label), 0.0);
+		gs_details_page_set_sensitive (label, version != NULL);
+		gtk_widget_show (label);
+		gtk_grid_attach (GTK_GRID (self->grid_popover_channel), label, 0, i, 1, 1);
+
+		label = gtk_label_new (version == NULL ? "—" : version);
+		gtk_label_set_xalign (GTK_LABEL (label), 0.0);
+		gs_details_page_set_sensitive (label, version != NULL);
+		gtk_widget_show (label);
+		gtk_grid_attach (GTK_GRID (self->grid_popover_channel), label, 1, i, 1, 1);
+
+		if (version != NULL && channel != gs_app_get_active_channel (self->app)) {
+			GsDetailsPageChannelHelper *helper = g_new0 (GsDetailsPageChannelHelper, 1);
+
+			button = gtk_button_new_with_label (_("Switch"));
+			gtk_widget_show (button);
+			gtk_grid_attach (GTK_GRID (self->grid_popover_channel), button, 2, i, 1, 1);
+			helper->self = g_object_ref (self);
+			helper->channel = g_object_ref (channel);
+			g_signal_connect (button, "clicked",
+					  G_CALLBACK (gs_details_page_switch_channel_cb),
+					  helper);
+		}
+	}
+
+	gtk_widget_show (self->popover_channel);
+}
+
 static void
 gs_details_page_app_install_button_cb (GtkWidget *widget, GsDetailsPage *self)
 {
@@ -2557,6 +2733,9 @@ gs_details_page_setup (GsPage *page,
 	g_signal_connect (self->button_donate, "clicked",
 			  G_CALLBACK (gs_details_page_donate_cb),
 			  self);
+	g_signal_connect (self->button_details_channel, "clicked",
+			  G_CALLBACK (gs_details_page_channel_cb),
+			  self);
 	g_signal_connect (self->button_details_license_free, "clicked",
 			  G_CALLBACK (gs_details_page_license_free_cb),
 			  self);
@@ -2668,6 +2847,10 @@ gs_details_page_class_init (GsDetailsPageClass *klass)
 	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, label_details_size_installed_value);
 	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, label_details_updated_title);
 	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, label_details_updated_value);
+	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, label_details_channel_title);
+	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, button_details_channel);
+	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, popover_channel);
+	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, grid_popover_channel);
 	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, label_details_version_value);
 	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, label_details_permissions_title);
 	gtk_widget_class_bind_template_child (widget_class, GsDetailsPage, button_details_permissions_value);
diff --git a/src/gs-details-page.ui b/src/gs-details-page.ui
index 40814e2..a815e6d 100644
--- a/src/gs-details-page.ui
+++ b/src/gs-details-page.ui
@@ -583,6 +583,51 @@
                                 <property name="row_spacing">9</property>
                                 <property name="column_spacing">24</property>
                                 <property name="hexpand">True</property>
+                                <child>
+                                  <object class="GtkLabel" id="label_details_channel_title">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="label" translatable="yes">Channel</property>
+                                    <property name="xalign">0</property>
+                                    <property name="yalign">0.5</property>
+                                    <property name="vexpand">True</property>
+                                    <style>
+                                      <class name="dim-label"/>
+                                    </style>
+                                  </object>
+                                  <packing>
+                                    <property name="left_attach">0</property>
+                                    <property name="top_attach">0</property>
+                                  </packing>
+                                </child>
+                                <child>
+                                  <object class="GtkBox" id="box_details_channel_value">
+                                    <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="orientation">vertical</property>
+                                    <child>
+                                      <object class="GtkButton" id="button_details_channel">
+                                        <property name="label" translatable="no">stable</property>
+                                        <property name="visible">True</property>
+                                        <property name="can_focus">True</property>
+                                        <property name="receives_default">True</property>
+                                        <property name="halign">start</property>
+                                        <style>
+                                          <class name="details-channel"/>
+                                        </style>
+                                      </object>
+                                      <packing>
+                                        <property name="expand">False</property>
+                                        <property name="fill">False</property>
+                                        <property name="position">0</property>
+                                      </packing>
+                                    </child>
+                                  </object>
+                                  <packing>
+                                    <property name="left_attach">1</property>
+                                    <property name="top_attach">0</property>
+                                  </packing>
+                                </child>
                                 <child>
                                   <object class="GtkLabel" id="label_details_version_title">
                                     <property name="visible">True</property>
@@ -596,7 +641,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">0</property>
+                                    <property name="top_attach">1</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -615,7 +660,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">0</property>
+                                    <property name="top_attach">1</property>
                                   </packing>
                                 </child>
 
@@ -632,7 +677,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">8</property>
+                                    <property name="top_attach">9</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -653,7 +698,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">8</property>
+                                    <property name="top_attach">9</property>
                                   </packing>
                                 </child>
 
@@ -708,7 +753,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">1</property>
+                                    <property name="top_attach">2</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -726,7 +771,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">1</property>
+                                    <property name="top_attach">2</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -742,7 +787,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">2</property>
+                                    <property name="top_attach">3</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -762,7 +807,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">2</property>
+                                    <property name="top_attach">3</property>
                                   </packing>
                                 </child>
 
@@ -779,7 +824,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">6</property>
+                                    <property name="top_attach">7</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -793,7 +838,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">6</property>
+                                    <property name="top_attach">7</property>
                                   </packing>
                                 </child>
 
@@ -810,7 +855,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">7</property>
+                                    <property name="top_attach">8</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -824,7 +869,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">7</property>
+                                    <property name="top_attach">8</property>
                                   </packing>
                                 </child>
 
@@ -841,7 +886,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">5</property>
+                                    <property name="top_attach">6</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -856,7 +901,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">5</property>
+                                    <property name="top_attach">6</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -872,7 +917,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">4</property>
+                                    <property name="top_attach">5</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -901,7 +946,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">4</property>
+                                    <property name="top_attach">5</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -917,7 +962,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">0</property>
-                                    <property name="top_attach">3</property>
+                                    <property name="top_attach">4</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -963,7 +1008,7 @@
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="top_attach">3</property>
+                                    <property name="top_attach">4</property>
                                   </packing>
                                 </child>
                               </object>
@@ -1181,6 +1226,29 @@
       <widget name="button_details_license_unknown"/>
     </widgets>
   </object>
+  <object class="GtkPopover" id="popover_channel">
+    <property name="can_focus">False</property>
+    <property name="border_width">21</property>
+    <property name="relative_to">button_details_channel</property>
+    <child>
+      <object class="GtkScrolledWindow">
+        <property name="visible">True</property>
+        <property name="can_focus">True</property>
+        <property name="hscrollbar_policy">never</property>
+        <property name="vscrollbar_policy">automatic</property>
+        <property name="max-content-height">300</property>
+        <property name="propagate-natural-height">True</property>
+        <child>
+          <object class="GtkGrid" id="grid_popover_channel">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="row_spacing">9</property>
+            <property name="column_spacing">12</property>
+          </object>
+        </child>
+      </object>
+    </child>
+  </object>
   <object class="GtkPopover" id="popover_license_free">
     <property name="visible">False</property>
     <property name="border_width">21</property>
diff --git a/src/gtk-style.css b/src/gtk-style.css
index 01a260d..a9ec686 100644
--- a/src/gtk-style.css
+++ b/src/gtk-style.css
@@ -54,6 +54,37 @@
 	-gtk-outline-radius: 16px;
 }
 
+.details-channel,
+.details-channel:backdrop {
+	outline-offset: 0;
+	background-image: none;
+	border-image: none;
+	border-radius: 4px;
+	border-width: 0 0 2px 0;
+	padding: 1px 9px;
+	box-shadow: none;
+	text-shadow: none;
+	color: #ffffff;
+}
+
+.details-channel label,
+.details-channel:backdrop label,
+.details-channel:hover label {
+	color: #fff;
+}
+
+.details-channel {
+	background-color: #4e9a06;
+	border-color: #3e7905;
+}
+.details-channel:hover {
+	background-color: #5db807;
+	border-color: #4d9606;
+}
+.details-channel:backdrop {
+	border-color: #4e9a06;
+}
+
 .details-license-free,
 .details-license-nonfree,
 .details-license-unknown,
